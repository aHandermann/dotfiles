[user]
  name = Adam Handermann
  email = adamhandermann@gmail.com
[credential]
        helper = GIT_CREDENTIAL_HELPER
[color]
  ui = true
  branch = auto
  diff = auto
  status = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[svn]
  # push empty directory removals back to svn as directory deletes
  rmdir = true

[core]
  excludesfile = ~/.gitignore_global
  editor = subl -w
  mergeoptions = --no-ff --no-commit
  autocrlf = input

[difftool "Kaleidoscope"]
        cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
        tool = Kaleidoscope
[difftool]
        prompt = false

[mergetool "Kaleidoscope"]
        cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
        trustExitCode = true
[merge]
        tool = Kaleidoscope
[mergetool]
        prompt = false

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[alias]
  aa = add --all
  # checkouts
  co = checkout
  cb = checkout -b
  ct = checkout -t
  cr = checkout --
  unstage = reset HEAD
  # submodules
  sm = "!f() { git submodule update --init --recursive $1; }; f"
  #branch management
  b = branch
  ba = branch -a
  bd = branch -d
  bD = branch -D
  bm = branch -m
  d = diff
  dt = difftool
  m = merge
  mt = mergetool
  r = rebase
  re = remote
  rea = remote -v
  #rebases & squash
  rb = rebase
  rbi = rebase -i
  rbc = rebase --continue
  rba = rebase --abort
  rbs = rebase --skip
  #squashes
  sq = "!f() { git rebase -i HEAD~$1; }; f"
  # tags
  t = tag -l
  squash = "!f() { git rebase -i HEAD~$1; }; f"
  # stashes
  st = stash
  stl = stash list
  stp = stash pop
  sts = "!f() { git stash show stash@{$1}; }; f"
  std = "!f() { git stash show stash@{$1} -U5; }; f"
  strm = "!f() { git stash drop stash@{$1} -U5; }; f"
  #commits
  c = commit
  cm = commit -m
  cma = commit -am
  # pushes & pulls
  f = fetch --prune
  p = push
  ps = push
  pl = pull
  plr = pull-request
  psf = push --force
  # status & log
  s = status -s
  ss = status
  l = "!f() { git log $1 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit; }; f"
  lg = "!f() { git log $1 --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit;};f"
  # show tracked branches
  tracked = "!d() { git for-each-ref --format='%(refname:short)' refs/heads/ | while read b; do if r=$(git config --get branch.$b.remote); then m=$(git config --get branch.$b.merge); echo \"$b -> $r/${m##*/}\"; fi; done } ; d"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  #show changes
  wc = whatchanged -p --abbrev-commit --pretty=medium


[push]
  default=simple

[help]
        autocorrect = 1
